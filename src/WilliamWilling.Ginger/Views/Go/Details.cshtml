@model WilliamWilling.Ginger.Models.BoardEntity

<h1>Go</h1>

<style>
  .go-row {
    margin: 0;
    padding: 0;
  }

  .go-cell {
    border: 1px solid black;
    border-width: 1px 0 0 1px;
    display: inline-block;
    width: 20px;
    height: 20px;
    text-decoration: none;
  }

  .go-cell:last-child {
    border-right: 1px solid black;
  }

  .go-row:last-child .go-cell {
    border-bottom: 1px solid black;
  }
</style>

<div class="go-board">
  
</div>

<script>
  function onCellClick() {
    if (this.innerHTML === 'B') {
      this.innerHTML = 'W';
    }
    else if (this.innerHTML == 'W') {
      this.innerHTML = '&nbsp;'
    }
    else {
      this.innerHTML = 'B';
    }

    saveBoard();
  }

  function buildBoard(data) {
    var board = eval('(' + data + ')');
    var boardElement = document.getElementsByClassName('go-board')[0];

    for (var j = 0; j < board.cells.length; j++) {
      var row = board.cells[j];
      var rowElement = document.createElement('div');
      rowElement.className = 'go-row';
      boardElement.appendChild(rowElement);

      for (var i = 0; i < row.length; i++) {
        var cell = row[i];
        var cellElement = document.createElement('a');
        cellElement.className = 'go-cell';
        cellElement.href = '#';
        cellElement.onclick = onCellClick;
        rowElement.appendChild(cellElement);

        switch (cell)
        {
          case 0:
            cellElement.innerHTML = '&nbsp;'
            break;

          case 1:
            cellElement.innerText = 'B';
            break;

          case 2:
            cellElement.innerText = 'W';
            break;
        }
      }
    }
  }

  function saveBoard() {
    var board = serializeBoard();

    var xmlhttp = new XMLHttpRequest();
    xmlhttp.open("POST", "/go/edit/@Model.RowKey", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("contents=" + board);
  }

  function serializeBoard() {
    var result = '{version:1,cells:[';
    var rows = document.getElementsByClassName('go-row');

    for (var j = 0; j < rows.length; j++) {
      var row = rows[j];
      result += '[';

      for (var i = 0; i < row.childNodes.length; i++) {
        var cell = row.childNodes[i];

        switch (cell.innerHTML) {
          case 'B':
            result += '1';
            break;

          case 'W':
            result += '2';
            break;

          default:
            result += '0';
            break;
        }

        if (i < row.childNodes.length - 1) {
          result += ',';
        }
      }

      result += ']';

      if (j < rows.length - 1) {
        result += ',';
      }
    }

    result += ']}';
    return result;
  }

  buildBoard("@Model.Contents");
</script>